/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/free": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** De Free API biedt de mogelijkheid om vrij te zoeken (klassiek geocoderen), waar zonder
         *     tussenkomst van suggesties de API direct resultaten teruggeeft op basis van de zoekopdracht.
         *      */
        get: operations["free"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Zodra er op basis van suggesties van de Suggest API een keuze is gemaakt, wordt de
         *     Lookup API aangeroepen, welke o.a. een (versimpelde) geometrie van de zoekopdracht
         *     teruggeeft.
         *      */
        get: operations["lookup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reverse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** De Reverse API biedt de mogelijkheid om een locatie (punt geometrie) op te geven
         *     om vervolgens verschillende gegevens in een range rondom deze locatie te ontvangen.
         *      */
        get: operations["reverseGeocoder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** De Suggest API biedt de mogelijkheid om een (gedeelte van een) zoekopdracht op
         *     te voeren, waarnaar er suggesties teruggegeven worden.
         *      */
        get: operations["suggest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        error: {
            /** @example 400 */
            code?: number;
            metadata?: string[];
            /** @example undefined field */
            msg?: string;
        };
        highlighting: {
            [key: string]: {
                suggest?: string[];
            };
        };
        response: {
            docs?: Record<string, never>[];
            /** Format: float */
            maxScore?: number;
            numFound?: number;
            numFoundExact?: boolean;
            start?: number;
        };
        spellcheck: {
            collations?: (string | {
                collationQuery?: string;
                hits?: number;
                misspellingsAndCorrections?: string[];
            })[];
            suggestions?: (string | {
                endOffset?: number;
                numFound?: number;
                startOffset?: number;
                suggestion?: string[];
            })[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    free: {
        parameters: {
            query?: {
                /** @description Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier
                 *     worden toegepast, bijv. combineren met "and", en het gebruik van dubbele quotes
                 *     voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er
                 *     gebruik gemaakt van synoniemen.
                 *
                 *     Voorbeelden:
                 *     `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in
                 *     de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.
                 *
                 *     `q="De Bilt"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de
                 *     woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op
                 *     dat bij het daadwerkelijk verzenden van het request onder water de
                 *     URL-encodingregels toegepast worden, dus een spatie wordt verzonden als
                 *     een plusteken.
                 *
                 *     `q="Sint Jacob" Utre`: geeft o.a. adressen terug waarvan er delen
                 *     achtereenvolgens beginnen met "Sint" en "Jacob", of met "St"
                 *     (synoniem) en "Jacob", en waar ook een deel met "Utre" begint. Een
                 *     voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze)
                 *     in Utrecht.
                 *      */
                q?: string;
                /** @description Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met
                 *     behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op
                 *     afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend
                 *     is, kan op deze manier effectiever worden gezocht.
                 *
                 *     Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije
                 *     geocoder-services. Hier worden meestal meerdere resultaten teruggegeven.
                 *     Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.
                 *      */
                lat?: number;
                /** @description Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met
                 *     behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op
                 *     afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend
                 *     is, kan op deze manier effectiever worden gezocht.
                 *
                 *     Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije
                 *     geocoder-services. Hier worden meestal meerdere resultaten teruggegeven.
                 *     Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.
                 *
                 *     Voorbeeld: `lat=52.09&lon=5.12`
                 *
                 *     De resultaten worden gesorteerd op afstand van een bepaald punt in het
                 *     centrum van Utrecht.
                 *      */
                lon?: number;
                /** @description Hiermee worden de velden opgegeven die teruggegeven dienen te worden. */
                fl?: string;
                /** @description Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. */
                fq?: string[];
                /** @description Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard
                 *     in gezocht wordt, wanneer de veldnaam niet wordt meegegeven.
                 *      */
                df?: string;
                /** @description Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden
                 *     meegegeven. Hiermee kan de scoreberekening worden aangepast.
                 *      */
                qf?: string;
                /** @description Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra
                 *     boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.
                 *
                 *     Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt.
                 *     Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`.
                 *      */
                bq?: string[];
                /** @description Hiermee wordt opgegeven wat de index is van het eerste resultaat dat
                 *     teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter
                 *     kunnen deze services gepagineerd worden bevraagd. Het maximum is "10.000".
                 *      */
                start?: number;
                /** @description Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is
                 *     dat teruggegeven moet worden op deze bevraging. Het maximum is "100".
                 *      */
                rows?: number;
                /** @description Hiermee kan worden opgegeven hoe de sortering plaatsvindt. */
                sort?: string;
                /** @description Hiermee wordt opgegeven wat het outputformaat is van de bevraging. */
                wt?: "json" | "xml";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        response?: components["schemas"]["response"];
                    };
                    "application/xml": unknown;
                };
            };
            /** @description 400 Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: components["schemas"]["error"];
                    };
                    "application/xml": unknown;
                    "text/html": unknown;
                    "text/plain": string;
                };
            };
        };
    };
    lookup: {
        parameters: {
            query: {
                /** @description Hiermee wordt het object-ID opgegeven. */
                id: string;
                /** @description Hiermee worden de velden opgegeven die teruggegeven dienen te worden. */
                fl?: string;
                /** @description Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. */
                fq?: string[];
                /** @description Hiermee wordt opgegeven wat het outputformaat is van de bevraging. */
                wt?: "json" | "xml";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        response?: components["schemas"]["response"];
                    };
                    "application/xml": unknown;
                };
            };
            /** @description 400 Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: components["schemas"]["error"];
                    };
                    "application/xml": unknown;
                    "text/html": unknown;
                    "text/plain": string;
                };
            };
        };
    };
    reverseGeocoder: {
        parameters: {
            query?: {
                /**
                 * @description Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84)
                 *     opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken.
                 *
                 * @example 194195.304
                 */
                X?: number;
                /**
                 * @description Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84)
                 *     opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken.
                 *
                 * @example 465885.902
                 */
                Y?: number;
                /** @description Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84)
                 *     opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken.
                 *      */
                lat?: number;
                /** @description Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84)
                 *     opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken.
                 *      */
                lon?: number;
                /** @description Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het
                 *     resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type
                 *     parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met
                 *     `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de
                 *     resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat
                 *     wordt teruggegeven.
                 *      */
                type?: string;
                /** @description Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen
                 *     dan geen resultaten worden teruggegeven die verder liggen dan deze waarden.
                 *      */
                distance?: number;
                /** @description Hiermee worden de velden opgegeven die teruggegeven dienen te worden. */
                fl?: string;
                /** @description Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt
                 *     uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten
                 *     die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten
                 *     dan het aantal rows kan terugkrijgen.
                 *      */
                fq?: string;
                /** @description Hiermee wordt opgegeven wat de index is van het eerste resultaat dat
                 *     teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter
                 *     kunnen deze services gepagineerd worden bevraagd. Het maximum is "10.000".
                 *      */
                start?: number;
                /** @description Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is
                 *     dat teruggegeven moet worden op deze bevraging. Het maximum is "100".
                 *      */
                rows?: number;
                /** @description Hiermee wordt opgegeven wat het outputformaat is van de bevraging. */
                wt?: "json" | "xml";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        response?: components["schemas"]["response"];
                    };
                    "application/xml": unknown;
                };
            };
            /** @description 400 Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: components["schemas"]["error"];
                    };
                    "application/xml": unknown;
                    "text/html": unknown;
                    "text/plain": string;
                };
            };
        };
    };
    suggest: {
        parameters: {
            query: {
                /** @description Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier
                 *     worden toegepast, bijv. combineren met "and", en het gebruik van dubbele quotes
                 *     voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er
                 *     gebruik gemaakt van synoniemen.
                 *
                 *     Voorbeelden:
                 *     `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in
                 *     de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.
                 *
                 *     `q="De Bilt"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de
                 *     woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op
                 *     dat bij het daadwerkelijk verzenden van het request onder water de
                 *     URL-encodingregels toegepast worden, dus een spatie wordt verzonden als
                 *     een plusteken.
                 *
                 *     `q="Sint Jacob" Utre`: geeft o.a. adressen terug waarvan er delen
                 *     achtereenvolgens beginnen met "Sint" en "Jacob", of met "St"
                 *     (synoniem) en "Jacob", en waar ook een deel met "Utre" begint. Een
                 *     voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze)
                 *     in Utrecht.
                 *      */
                q: string;
                /** @description Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met
                 *     behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op
                 *     afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend
                 *     is, kan op deze manier effectiever worden gezocht.
                 *
                 *     Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije
                 *     geocoder-services. Hier worden meestal meerdere resultaten teruggegeven.
                 *     Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.
                 *
                 *     Voorbeeld: `lat=52.09&lon=5.12`
                 *
                 *     De resultaten worden gesorteerd op afstand van een bepaald punt in het
                 *     centrum van Utrecht.
                 *      */
                lat?: number;
                /** @description Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met
                 *     behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op
                 *     afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend
                 *     is, kan op deze manier effectiever worden gezocht.
                 *
                 *     Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije
                 *     geocoder-services. Hier worden meestal meerdere resultaten teruggegeven.
                 *     Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.
                 *
                 *     Voorbeeld: `lat=52.09&lon=5.12`
                 *
                 *     De resultaten worden gesorteerd op afstand van een bepaald punt in het
                 *     centrum van Utrecht.
                 *      */
                lon?: number;
                /** @description Hiermee worden de velden opgegeven die teruggegeven dienen te worden. */
                fl?: string;
                /** @description Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. */
                fq?: string[];
                /** @description Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden
                 *     meegegeven. Hiermee kan de scoreberekening worden aangepast.
                 *      */
                qf?: string;
                /** @description Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra
                 *     boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.
                 *
                 *     Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt.
                 *     Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`.
                 *      */
                bq?: string[];
                /** @description Hiermee wordt opgegeven wat de index is van het eerste resultaat dat
                 *     teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter
                 *     kunnen deze services gepagineerd worden bevraagd. Hhet maximum is "10.000".
                 *      */
                start?: number;
                /** @description Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is
                 *     dat teruggegeven moet worden op deze bevraging. Het maximum is "100".
                 *      */
                rows?: number;
                /** @description Hiermee kan worden opgegeven hoe de sortering plaatsvindt. */
                sort?: string;
                /** @description Hiermee wordt opgegeven wat het outputformaat is van de bevraging. */
                wt?: "json" | "xml";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        highlighting?: components["schemas"]["highlighting"];
                        response?: components["schemas"]["response"];
                        spellcheck?: components["schemas"]["spellcheck"];
                    };
                    "application/xml": unknown;
                };
            };
            /** @description 400 Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: components["schemas"]["error"];
                    };
                    "application/xml": unknown;
                    "text/html": unknown;
                    "text/plain": string;
                };
            };
        };
    };
}
